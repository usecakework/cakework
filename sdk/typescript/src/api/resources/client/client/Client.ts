/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { CakeworkApi } from "../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
  interface Options {
    environment?: environments.CakeworkApiEnvironment | string;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  /**
   * Get the status of a run
   * @throws {CakeworkApi.RunDoesNotExistError}
   */
  public async getRunStatus(
    runId: CakeworkApi.RunId
  ): Promise<CakeworkApi.Status> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ??
          environments.CakeworkApiEnvironment.Production,
        `/client/runs/${runId}/status`
      ),
      method: "GET",
      headers: {
      },
    });
    if (_response.ok) {
      return await serializers.Status.parse(
        _response.body as serializers.Status.Raw
      );
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 404:
          throw new CakeworkApi.RunDoesNotExistError();
        default:
          throw new errors.CakeworkApiError({
            statusCode: _response.error.statusCode,
            responseBody: _response.error.rawBody,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.CakeworkApiError({
          statusCode: _response.error.statusCode,
          responseBody: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.CakeworkApiTimeoutError();
      case "unknown":
        throw new errors.CakeworkApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Get the result of a run
   * @throws {CakeworkApi.RunDoesNotExistError}
   */
  public async getRunResult(
    runId: CakeworkApi.RunId
  ): Promise<CakeworkApi.RunResult | undefined> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ??
          environments.CakeworkApiEnvironment.Production,
        `/client/runs/${runId}/result`
      ),
      method: "GET",
      headers: {
      },
    });
    if (_response.ok) {
      return await serializers.RunResult.parse(
        _response.body as serializers.RunResult.Raw
      );
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 404:
          throw new CakeworkApi.RunDoesNotExistError();
        default:
          throw new errors.CakeworkApiError({
            statusCode: _response.error.statusCode,
            responseBody: _response.error.rawBody,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.CakeworkApiError({
          statusCode: _response.error.statusCode,
          responseBody: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.CakeworkApiTimeoutError();
      case "unknown":
        throw new errors.CakeworkApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * Run a task
   * @throws {CakeworkApi.RunDoesNotExistError}
   */
  public async run(
    project: CakeworkApi.Project,
    task: CakeworkApi.Task,
    request: CakeworkApi.RunRequest
  ): Promise<CakeworkApi.RunId> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ??
          environments.CakeworkApiEnvironment.Production,
        `/client/projects/${project}/tasks/${task}/runs`
      ),
      method: "POST",
      headers: {
      },
      body: await serializers.RunRequest.json(request),
    });
    if (_response.ok) {
      return await serializers.RunId.parse(
        _response.body as serializers.RunId.Raw
      );
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 404:
          throw new CakeworkApi.RunDoesNotExistError();
        default:
          throw new errors.CakeworkApiError({
            statusCode: _response.error.statusCode,
            responseBody: _response.error.rawBody,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.CakeworkApiError({
          statusCode: _response.error.statusCode,
          responseBody: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.CakeworkApiTimeoutError();
      case "unknown":
        throw new errors.CakeworkApiError({
          message: _response.error.errorMessage,
        });
    }
  }
}
